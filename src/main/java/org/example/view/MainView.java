package org.example.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class MainView {
    private JPanel mainPanel;
    private JButton veterinariosButton;
    private JButton agendamentosButton;
    private JButton pacientesButton;
    private JButton estoqueButton;
    private JButton receitasMedicasButton;
    private JButton proprietariosButton;
    private JButton faturasButton;
    private JButton sairButton;
    private JButton historicoButton;

    private final Map<String, JFrame> openFrames = new HashMap<>();

    public MainView() {
        veterinariosButton.addActionListener(e -> openFrame("Vet Clinic - Veterinários", new VeterinarioView().getMainPanel()));

        proprietariosButton.addActionListener(e -> openFrame("Vet Clinic - Proprietários", new ProprietarioView().getMainPanel()));

        faturasButton.addActionListener(e -> openFrame("Vet Clinic - Faturas", new FaturaView().getMainPanel()));

        pacientesButton.addActionListener(e -> openFrame("Vet Clinic - Pacientes", new PacienteView().getMainPanel()));

        agendamentosButton.addActionListener(e -> openFrame("Vet Clinic - Agendamentos", new AgendamentoView().getMainPanel()));

        receitasMedicasButton.addActionListener(e -> openFrame("Vet Clinic - Receitas Médicas", new ReceitaMedicaView().getMainPanel()));

        estoqueButton.addActionListener(e -> openFrame("Vet Clinic - Estoque", new EstoqueView().getMainPanel()));

        historicoButton.addActionListener(e -> openFrame("Vet Clinic - Histórico", new HistoricoView().getMainPanel()));

        sairButton.addActionListener(e -> {
            int response = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        });
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    private void openFrame(String title, JPanel panel) {
        if (openFrames.containsKey(title)) {
            JFrame existingFrame = openFrames.get(title);
            existingFrame.toFront();
            existingFrame.requestFocus();
        } else {
            JFrame frame = new JFrame(title);
            frame.setContentPane(panel);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(800, 600);
            openFrames.put(title, frame);

            frame.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent windowEvent) {
                    openFrames.remove(title);
                }
            });
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, BorderLayout.CENTER);
        agendamentosButton = new JButton();
        Font agendamentosButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, agendamentosButton.getFont());
        if (agendamentosButtonFont != null) agendamentosButton.setFont(agendamentosButtonFont);
        agendamentosButton.setText("Agendamentos");
        panel1.add(agendamentosButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        veterinariosButton = new JButton();
        Font veterinariosButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, veterinariosButton.getFont());
        if (veterinariosButtonFont != null) veterinariosButton.setFont(veterinariosButtonFont);
        veterinariosButton.setText("Veterinários");
        panel1.add(veterinariosButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        proprietariosButton = new JButton();
        Font proprietariosButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, proprietariosButton.getFont());
        if (proprietariosButtonFont != null) proprietariosButton.setFont(proprietariosButtonFont);
        proprietariosButton.setText("Proprietários");
        panel1.add(proprietariosButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        receitasMedicasButton = new JButton();
        Font receitasMedicasButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, receitasMedicasButton.getFont());
        if (receitasMedicasButtonFont != null) receitasMedicasButton.setFont(receitasMedicasButtonFont);
        receitasMedicasButton.setText("Receitas Médicas");
        panel1.add(receitasMedicasButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        sairButton = new JButton();
        Font sairButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, sairButton.getFont());
        if (sairButtonFont != null) sairButton.setFont(sairButtonFont);
        sairButton.setText("Sair");
        panel1.add(sairButton, new GridConstraints(5, 0, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        faturasButton = new JButton();
        Font faturasButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, faturasButton.getFont());
        if (faturasButtonFont != null) faturasButton.setFont(faturasButtonFont);
        faturasButton.setText("Faturas");
        panel1.add(faturasButton, new GridConstraints(2, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pacientesButton = new JButton();
        Font pacientesButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, pacientesButton.getFont());
        if (pacientesButtonFont != null) pacientesButton.setFont(pacientesButtonFont);
        pacientesButton.setText("Pacientes");
        panel1.add(pacientesButton, new GridConstraints(2, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        historicoButton = new JButton();
        Font historicoButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, historicoButton.getFont());
        if (historicoButtonFont != null) historicoButton.setFont(historicoButtonFont);
        historicoButton.setText("Histórico");
        panel1.add(historicoButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        estoqueButton = new JButton();
        Font estoqueButtonFont = this.$$$getFont$$$("Arial Black", Font.PLAIN, 18, estoqueButton.getFont());
        if (estoqueButtonFont != null) estoqueButton.setFont(estoqueButtonFont);
        estoqueButton.setText("Estoque");
        panel1.add(estoqueButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, BorderLayout.NORTH);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-1711904));
        label1.setIcon(new ImageIcon(getClass().getResource("/vet-clinic-logo-300px.png")));
        label1.setText("");
        panel3.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel3.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
